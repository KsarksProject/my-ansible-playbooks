---
- name: Create VM on Proxmox with specific hardware settings
  hosts: localhost
  gather_facts: false
  vars:
    proxmox_host: "172.28.0.251"
    proxmox_user: "root@pam"
    proxmox_password: "{{ proxmox_pass }}"  # Пароль передаётся через переменные окружения
    proxmox_node: "pve-in"
    storage: "local-lvm"
    iso_image: "ubuntu-22.04.4-live-server-amd64.iso"
    vm_id: 110  # Уникальный ID новой VM
    vm_name: "Ubuntu_VM_AWX"
    memory: 4096  # 4 ГБ
    cpus: 1  # 1 ядро
    disk_size: "32G"  # Размер диска
    net_bridge: "vmbr1"  # Сетевой мост

  tasks:
    - name: Create VM with SCSI disk and CD-ROM
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: false
        node: "{{ proxmox_node }}"
        vmid: "{{ vm_id }}"
        name: "{{ vm_name }}"
        memory: "{{ memory }}"
        cores: "{{ cpus }}"
        net:
          model: "virtio"
          bridge: "{{ net_bridge }}"
          firewall: true
        scsi: "local-lvm:{{ disk_size }}"  # Настройка SCSI-диска
        ide: "{{ storage }}:iso={{ iso_image }}"  # Привязка ISO-образа к CD-ROM
        ostype: "l26"  # Linux
        boot: "cdn"  # Порядок загрузки: CD-ROM -> Disk -> Network
        state: present
        timeout: 300

    - name: Start the VM
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: false
        node: "{{ proxmox_node }}"
        vmid: "{{ vm_id }}"
        state: started

    - name: Wait for VM to start
      pause:
        seconds: 60

- name: Configure the VM (Install Optional Components)
  hosts: all
  gather_facts: true
  vars:
    docker_install: false
    nginx_install: false

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker (if selected)
      when: docker_install | bool
      apt:
        name: docker.io
        state: present

    - name: Install NGINX (if selected)
      when: nginx_install | bool
      apt:
        name: nginx
        state: present

    - name: Restart NGINX (if installed)
      when: nginx_install | bool
      service:
        name: nginx
        state: restarted

    - name: Display installation summary
      debug:
        msg: >
          Установка завершена.
          Docker установлен: {{ docker_install }}.
          NGINX установлен: {{ nginx_install }}.
