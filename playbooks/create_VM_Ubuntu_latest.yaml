---
- name: Deploy Ubuntu Cloud VMs on Proxmox and Update Inventory
  hosts: proxmox
  gather_facts: no
  vars:
    auth:
      user: "{{ proxmox_user | default('root') }}"
      password: "{{ proxmox_pass }}"
    cloud_image_url: https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img
    cloud_image_filename: ubuntu-24.04-server-cloudimg-amd64.img
    base_id: 8000
    base_name: ubuntu-cloud
    inventory_path: "/etc/ansible/inventory.ini"
    vm_list:
      - id: 201
        name: ubuntu-vm1
        disk_size: 15G
        net0: virtio,bridge=vmbr1
        ipconfig0: 'ip=dhcp'
        cores: 2
        memory: 2048
      - id: 202
        name: ubuntu-vm2
        disk_size: 20G
        net0: virtio,bridge=vmbr1
        ipconfig0: 'ip=dhcp'
        cores: 4
        memory: 4096

  tasks:
    # Проверка наличия базовой VM
    - name: Check if base VM already exists
      ansible.builtin.command: qm status {{ base_id }}
      register: base_vm_check
      failed_when: false
      changed_when: false

    # Создание базовой VM
    - name: Setup Cloud-VM with image {{ cloud_image_filename }}
      block:
        - name: Download latest Ubuntu cloud image
          ansible.builtin.get_url:
            url: '{{ cloud_image_url }}'
            dest: '/tmp/{{ cloud_image_filename }}'

        - name: Create base VM
          ansible.builtin.command: >
            qm create {{ base_id }}
            --name {{ base_name }}
            --memory 2048
            --cores 2
            --net0 virtio,bridge=vmbr1

        - name: Import disk to VM
          ansible.builtin.command: >
            qm importdisk {{ base_id }} /tmp/{{ cloud_image_filename }} local-lvm

        - name: Configure VM hardware and Cloud-Init
          ansible.builtin.command: >
            qm set {{ base_id }}
            --scsihw virtio-scsi-pci
            --scsi0 local-lvm:vm-{{ base_id }}-disk-0
            --ide2 local-lvm:cloudinit
            --boot c --bootdisk scsi0
            --vga std
            --agent enabled=1
            --ciuser {{ auth.user }}
            --cipassword {{ auth.password }}

        - name: Set VM as template
          ansible.builtin.command: qm template {{ base_id }}

      when: base_vm_check.rc != 0

    # Клонирование и настройка VM
    - name: Clone and configure VMs
      block:
        - name: Clone VM and resize disk
          ansible.builtin.command: >
            qm clone {{ base_id }} {{ item.id }}
            --name {{ item.name }}
            --full
          loop: '{{ vm_list }}'

        - name: Configure disk size
          ansible.builtin.command: >
            qm resize {{ item.id }} scsi0 {{ item.disk_size }}
          loop: '{{ vm_list }}'

        - name: Configure VM cores
          ansible.builtin.command: >
            qm set {{ item.id }} --cores {{ item.cores }}
          when: item.cores is defined
          loop: '{{ vm_list }}'

        - name: Configure VM memory
          ansible.builtin.command: >
            qm set {{ item.id }} --memory {{ item.memory }}
          when: item.memory is defined
          loop: '{{ vm_list }}'

        - name: Configure network settings
          ansible.builtin.command: >
            qm set {{ item.id }} --net0 {{ item.net0 }}
          when: item.net0 is defined
          loop: '{{ vm_list }}'

        - name: Configure IP settings
          ansible.builtin.command: >
            qm set {{ item.id }} --ipconfig0 {{ item.ipconfig0 }}
          when: item.ipconfig0 is defined
          loop: '{{ vm_list }}'

        - name: Start VMs
          ansible.builtin.command: >
            qm start {{ item.id }}
          loop: '{{ vm_list }}'

        - name: Wait for 180 seconds
          ansible.builtin.pause:
            seconds: 180

        # Получение IP-адресов и добавление в inventory.ini
    - name: Get VM IP from Proxmox Guest Agent
      block:
        - name: Ensure QEMU Guest Agent is running on VMs
          ansible.builtin.shell: |
            qm guest exec {{ item.id }} -- /bin/sh -c 'ip -4 -o addr show eth0 | awk "{print \$4}" | cut -d/ -f1'
          register: vm_ip
          changed_when: false
          failed_when: vm_ip.rc != 0
          loop: "{{ vm_list }}"

        - name: Ensure IP address was retrieved
          ansible.builtin.fail:
            msg: "Failed to retrieve IP address for {{ item.item.name }}"
          when: item.stdout | trim == ""
          loop: "{{ vm_ip.results }}"

        - name: Add VM to inventory
          ansible.builtin.lineinfile:
            path: "{{ inventory_path }}"
            line: "{{ item.item.name }} ansible_host={{ item.stdout | trim }} ansible_user=root ansible_ssh_private_key_file=~/.ssh/id_rsa"
            create: yes
          when: item.stdout | trim != ""
          loop: "{{ vm_ip.results }}"

        - name: Verify new VMs in inventory
          ansible.builtin.command: "ansible-inventory --list"
          register: inventory_check
          changed_when: false

        - name: Debug inventory output
          ansible.builtin.debug:
            msg: "{{ inventory_check.stdout }}"

