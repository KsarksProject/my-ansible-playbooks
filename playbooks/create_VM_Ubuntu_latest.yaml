- name: Deploy Ubuntu Cloud VMs on Proxmox
  hosts: proxmox
  gather_facts: no
  vars:
    auth:
      user: "{{ proxmox_user | default('root') }}"
      password: "{{ proxmox_pass }}"
    cloud_image_url: https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img
    cloud_image_filename: ubuntu-24.04-server-cloudimg-amd64.img
    base_id: 8000
    base_name: ubuntu-cloud
    vm_list:
      - id: 201
        name: ubuntu-vm1
        disk_size: 15G
        net0: virtio,bridge=vmbr1
        ipconfig0: 'ip=dhcp'
        cores: 2
        memory: 2048
      - id: 202
        name: ubuntu-vm2
        disk_size: 20G
        net0: virtio,bridge=vmbr1
        ipconfig0: 'ip=dhcp'
        cores: 4
        memory: 4096

  tasks:
    # Проверка наличия базовой VM
    - name: Check if base VM already exists
      community.general.proxmox:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ auth.user }}"
        api_password: "{{ auth.password }}"
        vmid: "{{ base_id }}"
        state: present
      register: base_vm_check
      ignore_errors: yes

    # Создание базовой VM
    - name: Setup Cloud-VM with image {{ cloud_image_filename }}
      block:
        - name: Download latest Ubuntu cloud image
          ansible.builtin.get_url:
            url: '{{ cloud_image_url }}'
            dest: '/tmp/{{ cloud_image_filename }}'

        - name: Create base VM
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ base_id }}"
            name: "{{ base_name }}"
            memory: 2048
            cores: 2
            net:
              net0: "virtio,bridge=vmbr1"
            state: present

        - name: Import disk to VM
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ base_id }}"
            disk: "scsi0"
            storage: "local-lvm"
            image: "/tmp/{{ cloud_image_filename }}"

        - name: Configure VM hardware and Cloud-Init
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ base_id }}"
            scsihw: "virtio-scsi-pci"
            scsi0: "local-lvm:vm-{{ base_id }}-disk-0"
            ide2: "local-lvm:cloudinit"
            boot: "c"
            bootdisk: "scsi0"
            serial0: "socket"
            vga: "serial0"
            agent: "enabled=1"
            ciuser: "{{ auth.user }}"
            cipassword: "{{ auth.password }}"

        - name: Set VM as template
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ base_id }}"
            template: yes

      when: base_vm_check is failed

    # Клонирование и настройка VM
    - name: Clone and configure VMs
      block:
        - name: Clone VM and resize disk
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ base_id }}"
            newid: "{{ item.id }}"
            name: "{{ item.name }}"
            full: yes
          loop: "{{ vm_list }}"

        - name: Configure disk size
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ item.id }}"
            disk: "scsi0"
            size: "{{ item.disk_size }}"
          loop: "{{ vm_list }}"

        - name: Configure VM cores
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ item.id }}"
            cores: "{{ item.cores }}"
          loop: "{{ vm_list }}"

        - name: Configure VM memory
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ item.id }}"
            memory: "{{ item.memory }}"
          loop: "{{ vm_list }}"

        - name: Configure network settings
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ item.id }}"
            net:
              net0: "{{ item.net0 }}"
          loop: "{{ vm_list }}"

        - name: Configure IP settings
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ item.id }}"
            ipconfig0: "{{ item.ipconfig0 }}"
          loop: "{{ vm_list }}"

        - name: Start VMs
          community.general.proxmox:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ auth.user }}"
            api_password: "{{ auth.password }}"
            vmid: "{{ item.id }}"
            state: started
          loop: "{{ vm_list }}"

        - name: Wait for SSH to be available
          ansible.builtin.wait_for:
            port: 22
            host: "{{ item.name }}"
            timeout: 300
          loop: "{{ vm_list }}"

    # Установка QEMU Guest Agent
    - name: Install QEMU Guest Agent
      delegate_to: "{{ item.name }}"
      ansible.builtin.apt:
        name: qemu-guest-agent
        state: present
        update_cache: yes
      loop: "{{ vm_list }}"