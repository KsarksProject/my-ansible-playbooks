---
- name: Deploy Ubuntu Cloud VMs on Proxmox and Update Inventory
  hosts: proxmox
  gather_facts: no
  vars:
    auth:
      user: "{{ proxmox_user | default('root') }}"
      password: "{{ proxmox_pass }}"
    cloud_image_url: https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img
    cloud_image_filename: ubuntu-24.04-server-cloudimg-amd64.img
    base_id: 8000
    base_name: ubuntu-cloud
    inventory_path: /etc/ansible/inventory
    vm_list:
      - id: 201
        name: ubuntu-vm1
        disk_size: 15G
        net0: virtio,bridge=vmbr1
        ipconfig0: 'ip=dhcp'
        cores: 2
        memory: 2048
      - id: 202
        name: ubuntu-vm2
        disk_size: 20G
        net0: virtio,bridge=vmbr1
        ipconfig0: 'ip=dhcp'
        cores: 4
        memory: 4096

  tasks:
    # Проверка наличия базовой VM
    - name: Check if base VM already exists
      ansible.builtin.command: qm status {{ base_id }}
      register: base_vm_check
      failed_when: false
      changed_when: false

    # Создание базовой VM, если не существует
    - name: Setup Cloud-VM with image {{ cloud_image_filename }}
      block:
        - name: Download latest Ubuntu cloud image
          ansible.builtin.get_url:
            url: "{{ cloud_image_url }}"
            dest: "/tmp/{{ cloud_image_filename }}"

        - name: Create base VM
          ansible.builtin.command: >
            qm create {{ base_id }} --name {{ base_name }}
            --memory 2048 --cores 2 --net0 virtio,bridge=vmbr1

        - name: Import disk to VM
          ansible.builtin.command: >
            qm importdisk {{ base_id }} /tmp/{{ cloud_image_filename }} local-lvm

        - name: Configure VM hardware and Cloud-Init
          ansible.builtin.command: >
            qm set {{ base_id }}
            --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-{{ base_id }}-disk-0
            --ide2 local-lvm:cloudinit --boot c --bootdisk scsi0
            --vga std --agent enabled=1
            --ciuser {{ auth.user }} --cipassword {{ auth.password }}

        - name: Set VM as template
          ansible.builtin.command: qm template {{ base_id }}
      when: base_vm_check.rc != 0

    # Клонирование и настройка VMs
    - name: Clone and configure VMs
      block:
        - name: Clone VM and resize disk
          ansible.builtin.command: >
            qm clone {{ base_id }} {{ item.id }} --name {{ item.name }} --full
          loop: "{{ vm_list }}"

        - name: Configure VM settings
          ansible.builtin.command: >
            qm set {{ item.id }} --memory {{ item.memory }} --cores {{ item.cores }}
            --net0 {{ item.net0 }} --ipconfig0 {{ item.ipconfig0 }}
          loop: "{{ vm_list }}"

        - name: Start VMs
          ansible.builtin.command: qm start {{ item.id }}
          loop: "{{ vm_list }}"

    # Ожидание загрузки системы перед установкой QEMU Guest Agent
    - name: Wait for VMs to boot
      ansible.builtin.pause:
        seconds: 30

    # Установка QEMU Guest Agent в каждую VM
    - name: Install QEMU Guest Agent on VMs
      delegate_to: "{{ item.name }}"
      ansible.builtin.shell: |
        apt-get update -y
        apt-get install -y qemu-guest-agent
        systemctl enable --now qemu-guest-agent
      loop: "{{ vm_list }}"
      ignore_errors: yes

    # Проверка, что агент работает
    - name: Ensure QEMU Guest Agent is running
      delegate_to: "{{ item.name }}"
      ansible.builtin.shell: systemctl is-active qemu-guest-agent
      register: agent_status
      loop: "{{ vm_list }}"
      failed_when: "'active' not in agent_status.stdout"

    # Получение IP-адреса VM через qm guest exec
    - name: Retrieve VM IP address
      ansible.builtin.shell: >
        qm guest exec {{ item.id }} -- ip -4 addr show eth0 | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1
      register: vm_ips
      loop: "{{ vm_list }}"

    # Убеждаемся, что IP-адреса получены
    - name: Ensure IP address was retrieved
      ansible.builtin.assert:
        that:
          - item.stdout is defined
          - item.stdout | length > 0
        fail_msg: "Failed to retrieve IP address for {{ item.item.name }}"
      loop: "{{ vm_ips.results }}"

    # Запись IP в inventory
    - name: Update inventory file
      ansible.builtin.lineinfile:
        path: "{{ inventory_path }}"
        line: "{{ item.item.name }} ansible_host={{ item.stdout }}"
        create: yes
      loop: "{{ vm_ips.results }}"
